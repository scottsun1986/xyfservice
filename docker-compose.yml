version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: xyfservice-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-xyfservice}
      MYSQL_USER: ${MYSQL_USER:-xyfuser}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-xyfpass123}
      TZ: Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/my.cnf:/etc/mysql/conf.d/my.cnf
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - xyfservice-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: xyfservice-redis
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - xyfservice-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: xyfservice-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      SERVER_HOST: ${SERVER_HOST:-0.0.0.0}
      SERVER_PORT: ${SERVER_PORT:-3000}
      
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${MYSQL_USER:-xyfuser}
      DB_PASSWORD: ${MYSQL_PASSWORD:-xyfpass123}
      DB_NAME: ${MYSQL_DATABASE:-xyfservice}
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # JWT配置
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-in-production}
      
      # 微信小程序配置
      WECHAT_APPID: ${WECHAT_APPID:-your-wechat-appid}
      WECHAT_SECRET: ${WECHAT_SECRET:-your-wechat-secret}
      
      # 文件上传配置
      UPLOAD_PATH: /app/uploads
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-10485760}
      
      # 其他配置
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      TZ: Asia/Shanghai
    ports:
      - "3000:3000"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - xyfservice-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: xyfservice-nginx
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - backend_uploads:/var/www/uploads:ro
    depends_on:
      - backend
    networks:
      - xyfservice-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      timeout: 3s
      retries: 3

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: xyfservice-prometheus
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - xyfservice-network
    profiles:
      - monitoring

  # Grafana监控面板（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: xyfservice-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      TZ: Asia/Shanghai
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - xyfservice-network
    profiles:
      - monitoring

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  xyfservice-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16